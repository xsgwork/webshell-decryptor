pass=%2BMCB0aGVuDQoJCQkJCXJlc3VsdD0ib2siDQoJCQkJCXJlc3VsdD1yZXN1bHQmY2hyKDEwKQ0KCQkJCQlGb3IgaT0wIFRvIHJzLkZpZWxkcy5Db3VudC0xDQoJCQkJCQlmaWVsZE5hbWU9cnMuRmllbGRzKGkpLk5hbWUNCgkJCQkJCWlmCUlzRW1wdHkoZmllbGROYW1lKSBvciBJc051bGwoZmllbGROYW1lKSBvciBmaWVsZE5hbWU9IiIgdGhlbg0KCQkJCQkJCWZpZWxkTmFtZT0iZmllbGQiJihpKzEpDQoJCQkJCQllbmQgaWYNCgkJCQkJCXJlc3VsdD1yZXN1bHQmQmFzZTY0RW5jb2RlKGZpZWxkTmFtZSkmY2hyKDkpDQoJCQkJCU5leHQNCgkJCQkJcmVzdWx0PXJlc3VsdCZjaHIoMTApDQoJCQkJCVdoaWxlIE5vdCAocnMuRU9GIG9yIHJzLkJPRikNCgkJCQkJCQlyb3dTdHI9IiINCgkJCQkJCUZvciBpPTAgVG8gcnMuRmllbGRzLkNvdW50LTENCgkJCQkJCQl2PXJzKGkpLlZhbHVlDQoJCQkJCQkJaWYgSXNFbXB0eSh2KSBvciBJc051bGwodikgdGhlbg0KCQkJCQkJCQl2PSJudWxsIg0KCQkJCQkJCWVuZCBpZg0KCQkJCQkJCWlmIElzQXJyYXkodikgdGhlbg0KCQkJCQkJCQl2PSJCeXRlIEFycmF5W10iDQoJCQkJCQkJZW5kIGlmDQoJCQkJCQkJcm93U3RyPXJvd1N0ciZCYXNlNjRFbmNvZGUodikmY2hyKDkpDQoJCQkJCQlOZXh0DQoJCQkJCQlyZXN1bHQ9cmVzdWx0JnJvd1N0ciZjaHIoMTApDQoJCQkJCQlycy5Nb3ZlTmV4dA0KCQkJCQlXZW5kDQoJCQkJCXJzLkNsb3NlDQoJCQkJZWxzZSANCgkJCQkJcmVzdWx0PSJRdWVyeSBPSywgIiZSZWNvcmRzQWZmZWN0ZWQmIiByb3dzIGFmZmVjdGVkIg0KCQkJCWVuZCBpZg0KCQkJZW5kIGlmDQoJCQljb25uLmNsb3NlDQoJCWVuZCBpZg0KCQlleGVjU3FsPXJlc3VsdA0KCUVuZCBGdW5jdGlvbg0KDQoJRnVuY3Rpb24gaW5jbHVkZUNvZGUNCgkJZGltIGJpbkNvZGUsY29kZU5hbWUNCgkJY29kZU5hbWU9Z2V0UGFyYW1ldGVyVmFsdWUoIklDb2RlTmFtZSIpDQoJCWJpbkNvZGU9Z2V0UGFyYW1ldGVyVmFsdWUoImJpbkNvZGUiKQ0KCQlTZXNzaW9uKGNvZGVOYW1lKT1iaW5Db2RlDQoJCWluY2x1ZGVDb2RlPSJvayINCglFbmQgRnVuY3Rpb24NCg0KCUZ1bmN0aW9uIHRlc3QoKQ0KCQl0ZXN0PSJvayINCglFbmQgRnVuY3Rpb24NCg0KCUZ1bmN0aW9uIGNsb3NlRXgNCgkJU2Vzc2lvbi5BYmFuZG9uKCkNCgkJY2xvc2VFeD0ib2siDQoJRW5kIEZ1bmN0aW9uDQoNCglGdW5jdGlvbiBwYXJzZVBhcmFtZXRlcihzdHJlYW0pDQoJCWRpbSBrZXksdmFsdWVMZW4sYnl0ZVZhbHVlDQoJCWZvciBpPTEgdG8gc3RyZWFtLlNpemUNCgkJCWJ5dGVWYWx1ZSA9IGFzY2Ioc3RyZWFtLlJlYWQoMSkpDQoJCQlpZiBieXRlVmFsdWUgPSAmaDAyIHRoZW4NCgkJCQl2YWx1ZUxlbiA9IGFzY2Ioc3RyZWFtLlJlYWQoMSkpIG9yIExzaChhc2NiKHN0cmVhbS5SZWFkKDEpKSw4KSBvciBMc2goYXNjYihzdHJlYW0uUmVhZCgxKSksMTYpIG9yIExzaChhc2NiKHN0cmVhbS5SZWFkKDEpKSwyNCkNCgkJCQlpPWkrNA0KCQkJCVBhcmFtZXRlcnMuQWRkIGtleSxzdHJlYW0uUmVhZCh2YWx1ZUxlbikNCgkJCQlrZXk9IiINCgkJCQlpPWkrdmFsdWVMZW4NCgkJCUVsc2UNCgkJCQlrZXk9a2V5JmNocihieXRlVmFsdWUpDQoJCQllbmQgaWYNCgkJbmV4dA0KCUVuZCBGdW5jdGlvbg0KDQoJRnVuY3Rpb24gcnVuKHBzeCkNCgkJb24gZXJyb3IgcmVzdW1lIG5leHQNCgkJZGltIG1ldGhvZE5hbWUsdixjb2RlTmFtZQ0KCQlzZXQgQmluYXJ5U3RyZWFtID0gQ3JlYXRlT2JqZWN0KCJBZG9kYi5TdHJlYW0iKQ0KCQlCaW5hcnlTdHJlYW0uY2hhcnNldCA9ICJpc28tODg1OS0xIg0KCQlCaW5hcnlTdHJlYW0uVHlwZSA9IDENCgkJQmluYXJ5U3RyZWFtLk9wZW4NCgkJQmluYXJ5U3RyZWFtLldyaXRlIHBzeA0KCQlCaW5hcnlTdHJlYW0uUG9zaXRpb24gPSAwDQoJCXBhcnNlUGFyYW1ldGVyKEJpbmFyeVN0cmVhbSkNCgkJc2V0IEJpbmFyeVN0cmVhbSA9IE5vdGhpbmcNCg0KCQltZXRob2ROYW1lPWdldFBhcmFtZXRlclZhbHVlKCJtZXRob2ROYW1lIikNCgkJY29kZU5hbWU9Z2V0UGFyYW1ldGVyVmFsdWUoImNvZGVOYW1lIikNCgkJaWYgbm90IElzRW1wdHkobWV0aG9kTmFtZSkgdGhlbg0KCQkJaWYgSXNFbXB0eShjb2RlTmFtZSkgdGhlbg0KCQkJCXJ1bj1ldmFsKG1ldGhvZE5hbWUpDQoJCQllbHNlaWYgbm90IElzRW1wdHkoU2Vzc2lvbihjb2RlTmFtZSkpIHRoZW4NCgkJCQlFeGVjdXRlR2xvYmFsKFNlc3Npb24oY29kZU5hbWUpKQ0KCQkJCXJ1bj1HbG9iYWxSZXN1bHQNCgkJCWVsc2UNCgkJCQlydW49ImNvZGVOYW1lIG9yIG1ldGhvZE5hbWUgSXNFbXB0eSINCgkJCWVuZCBpZg0KCQllbHNlDQoJCQlydW49Im1ldGhvZCBpcyBudWxsIg0KCQllbmQgaWYNCgkJaWYJSXNFbXB0eShydW4pIHRoZW4NCgkJCXJ1bj0ibm8gcmVzdWx0Ig0KCQllbmQgaWYNCgkJaWYgRXJyIHRoZW4NCgkJCXJ1bj1ydW4mY2hyKDEwKSZFcnIuRGVzY3JpcHRpb24NCgkJZW5kIGlmDQoJCWlmIG5vdCBJc0FycmF5KHJ1bikgdGhlbg0KCQkJcnVuID0gU3RyZWFtX1N0cmluZ1RvQmluYXJ5KHJ1bikNCgkJZW5kIGlmDQoJRW5kIEZ1bmN0aW9u